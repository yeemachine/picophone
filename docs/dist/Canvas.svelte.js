import './Canvas.svelte.css.proxy.js';
/* src/Canvas.svelte generated by Svelte v3.44.2 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	set_style,
	space,
	svg_element,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import Artboard from './Artboard.svelte.js';

function create_fragment(ctx) {
	let container;
	let svg;
	let rect;
	let defs;
	let filter0;
	let feTurbulence0;
	let feDiffuseLighting;
	let feDistantLight;
	let feGaussianBlur;
	let feComposite0;
	let filter1;
	let feTurbulence1;
	let feDisplacementMap0;
	let filter2;
	let feTurbulence2;
	let feDisplacementMap1;
	let filter3;
	let feTurbulence3;
	let feColorMatrix0;
	let feComposite1;
	let filter4;
	let feTurbulence4;
	let feColorMatrix1;
	let feComposite2;
	let feTurbulence5;
	let feDisplacementMap2;
	let filter5;
	let feTurbulence6;
	let feDisplacementMap3;
	let feTurbulence7;
	let feDisplacementMap4;
	let feTurbulence8;
	let feDisplacementMap5;
	let feBlend0;
	let feBlend1;
	let filter6;
	let feTurbulence9;
	let feColorMatrix2;
	let feComposite3;
	let feTurbulence10;
	let feDisplacementMap6;
	let feTurbulence11;
	let feDisplacementMap7;
	let feTurbulence12;
	let feDisplacementMap8;
	let feBlend2;
	let feBlend3;
	let t0;
	let artboard;
	let t1;
	let div;
	let current;
	artboard = new Artboard({});

	return {
		c() {
			container = element("container");
			svg = svg_element("svg");
			rect = svg_element("rect");
			defs = svg_element("defs");
			filter0 = svg_element("filter");
			feTurbulence0 = svg_element("feTurbulence");
			feDiffuseLighting = svg_element("feDiffuseLighting");
			feDistantLight = svg_element("feDistantLight");
			feGaussianBlur = svg_element("feGaussianBlur");
			feComposite0 = svg_element("feComposite");
			filter1 = svg_element("filter");
			feTurbulence1 = svg_element("feTurbulence");
			feDisplacementMap0 = svg_element("feDisplacementMap");
			filter2 = svg_element("filter");
			feTurbulence2 = svg_element("feTurbulence");
			feDisplacementMap1 = svg_element("feDisplacementMap");
			filter3 = svg_element("filter");
			feTurbulence3 = svg_element("feTurbulence");
			feColorMatrix0 = svg_element("feColorMatrix");
			feComposite1 = svg_element("feComposite");
			filter4 = svg_element("filter");
			feTurbulence4 = svg_element("feTurbulence");
			feColorMatrix1 = svg_element("feColorMatrix");
			feComposite2 = svg_element("feComposite");
			feTurbulence5 = svg_element("feTurbulence");
			feDisplacementMap2 = svg_element("feDisplacementMap");
			filter5 = svg_element("filter");
			feTurbulence6 = svg_element("feTurbulence");
			feDisplacementMap3 = svg_element("feDisplacementMap");
			feTurbulence7 = svg_element("feTurbulence");
			feDisplacementMap4 = svg_element("feDisplacementMap");
			feTurbulence8 = svg_element("feTurbulence");
			feDisplacementMap5 = svg_element("feDisplacementMap");
			feBlend0 = svg_element("feBlend");
			feBlend1 = svg_element("feBlend");
			filter6 = svg_element("filter");
			feTurbulence9 = svg_element("feTurbulence");
			feColorMatrix2 = svg_element("feColorMatrix");
			feComposite3 = svg_element("feComposite");
			feTurbulence10 = svg_element("feTurbulence");
			feDisplacementMap6 = svg_element("feDisplacementMap");
			feTurbulence11 = svg_element("feTurbulence");
			feDisplacementMap7 = svg_element("feDisplacementMap");
			feTurbulence12 = svg_element("feTurbulence");
			feDisplacementMap8 = svg_element("feDisplacementMap");
			feBlend2 = svg_element("feBlend");
			feBlend3 = svg_element("feBlend");
			t0 = space();
			create_component(artboard.$$.fragment);
			t1 = space();
			div = element("div");
			attr(rect, "x", "-500");
			attr(rect, "y", "-500");
			attr(rect, "width", "1000");
			attr(rect, "height", "1000");
			attr(rect, "filter", "url(#roughPaper) url(#pencilTexture5)");
			set_style(rect, "fill", "#b5b5b5");
			set_style(rect, "stroke-width", "0");
			set_style(rect, "stroke", "none");
			attr(feTurbulence0, "type", "fractalNoise");
			attr(feTurbulence0, "baseFrequency", "128");
			attr(feTurbulence0, "numOctaves", "1");
			attr(feTurbulence0, "result", "noise");
			attr(feDistantLight, "azimuth", "45");
			attr(feDistantLight, "elevation", "55");
			attr(feDiffuseLighting, "in", "noise");
			attr(feDiffuseLighting, "lighting-color", "white");
			attr(feDiffuseLighting, "surfaceScale", "1");
			attr(feDiffuseLighting, "result", "diffLight");
			attr(feGaussianBlur, "in", "diffLight");
			attr(feGaussianBlur, "stdDeviation", "0.75");
			attr(feGaussianBlur, "result", "dlblur");
			attr(feComposite0, "operator", "arithmetic");
			attr(feComposite0, "k1", "1.2");
			attr(feComposite0, "k2", "0");
			attr(feComposite0, "k3", "0");
			attr(feComposite0, "k4", "0");
			attr(feComposite0, "in", "dlblur");
			attr(feComposite0, "in2", "SourceGraphic");
			attr(feComposite0, "result", "out");
			attr(filter0, "x", "0%");
			attr(filter0, "y", "0%");
			attr(filter0, "width", "100%");
			attr(filter0, "height", "100%");
			attr(filter0, "filterUnits", "objectBoundingBox");
			attr(filter0, "id", "roughPaper");
			attr(feTurbulence1, "type", "fractalNoise");
			attr(feTurbulence1, "baseFrequency", "1.2");
			attr(feTurbulence1, "numOctaves", "3");
			attr(feTurbulence1, "result", "noise");
			attr(feDisplacementMap0, "xChannelSelector", "R");
			attr(feDisplacementMap0, "yChannelSelector", "G");
			attr(feDisplacementMap0, "scale", "3");
			attr(feDisplacementMap0, "in", "SourceGraphic");
			attr(feDisplacementMap0, "result", "newSource");
			attr(filter1, "x", "-2%");
			attr(filter1, "y", "-2%");
			attr(filter1, "width", "104%");
			attr(filter1, "height", "104%");
			attr(filter1, "filterUnits", "objectBoundingBox");
			attr(filter1, "id", "PencilTexture");
			attr(feTurbulence2, "type", "fractalNoise");
			attr(feTurbulence2, "baseFrequency", "1.2");
			attr(feTurbulence2, "numOctaves", "3");
			attr(feTurbulence2, "result", "noise");
			attr(feDisplacementMap1, "xChannelSelector", "R");
			attr(feDisplacementMap1, "yChannelSelector", "G");
			attr(feDisplacementMap1, "scale", "3");
			attr(feDisplacementMap1, "in", "SourceGraphic");
			attr(feDisplacementMap1, "result", "newSource");
			attr(filter2, "x", "-2%");
			attr(filter2, "y", "-2%");
			attr(filter2, "width", "104%");
			attr(filter2, "height", "104%");
			attr(filter2, "filterUnits", "objectBoundingBox");
			attr(filter2, "id", "PencilTexture");
			attr(feTurbulence3, "type", "fractalNoise");
			attr(feTurbulence3, "baseFrequency", "2");
			attr(feTurbulence3, "numOctaves", "5");
			attr(feTurbulence3, "stitchTiles", "stitch");
			attr(feTurbulence3, "result", "f1");
			attr(feColorMatrix0, "type", "matrix");
			attr(feColorMatrix0, "values", "0 0 0 0 0, 0 0 0 0 0, 0 0 0 0 0, 0 0 0 -1.5 1.5");
			attr(feColorMatrix0, "result", "f2");
			attr(feComposite1, "operator", "in");
			attr(feComposite1, "in2", "f2");
			attr(feComposite1, "in", "SourceGraphic");
			attr(feComposite1, "result", "f3");
			attr(filter3, "x", "0%");
			attr(filter3, "y", "0%");
			attr(filter3, "width", "100%");
			attr(filter3, "height", "100%");
			attr(filter3, "filterUnits", "objectBoundingBox");
			attr(filter3, "id", "pencilTexture2");
			attr(feTurbulence4, "type", "fractalNoise");
			attr(feTurbulence4, "baseFrequency", "0.5");
			attr(feTurbulence4, "numOctaves", "5");
			attr(feTurbulence4, "stitchTiles", "stitch");
			attr(feTurbulence4, "result", "f1");
			attr(feColorMatrix1, "type", "matrix");
			attr(feColorMatrix1, "values", "0 0 0 0 0, 0 0 0 0 0, 0 0 0 0 0, 0 0 0 -1.5 1.5");
			attr(feColorMatrix1, "result", "f2");
			attr(feComposite2, "operator", "in");
			attr(feComposite2, "in2", "f2b");
			attr(feComposite2, "in", "SourceGraphic");
			attr(feComposite2, "result", "f3");
			attr(feTurbulence5, "type", "fractalNoise");
			attr(feTurbulence5, "baseFrequency", "1.2");
			attr(feTurbulence5, "numOctaves", "3");
			attr(feTurbulence5, "result", "noise");
			attr(feDisplacementMap2, "xChannelSelector", "R");
			attr(feDisplacementMap2, "yChannelSelector", "G");
			attr(feDisplacementMap2, "scale", "2.5");
			attr(feDisplacementMap2, "in", "f3");
			attr(feDisplacementMap2, "result", "f4");
			attr(filter4, "x", "0%");
			attr(filter4, "y", "0%");
			attr(filter4, "width", "100%");
			attr(filter4, "height", "100%");
			attr(filter4, "filterUnits", "objectBoundingBox");
			attr(filter4, "id", "pencilTexture3");
			attr(feTurbulence6, "type", "fractalNoise");
			attr(feTurbulence6, "baseFrequency", "0.03");
			attr(feTurbulence6, "numOctaves", "5");
			attr(feTurbulence6, "seed", "1");
			attr(feTurbulence6, "result", "f1");
			attr(feDisplacementMap3, "xChannelSelector", "R");
			attr(feDisplacementMap3, "yChannelSelector", "G");
			attr(feDisplacementMap3, "scale", "5");
			attr(feDisplacementMap3, "in", "SourceGraphic");
			attr(feDisplacementMap3, "in2", "f1");
			attr(feDisplacementMap3, "result", "f4");
			attr(feTurbulence7, "type", "fractalNoise");
			attr(feTurbulence7, "baseFrequency", "0.03");
			attr(feTurbulence7, "numOctaves", "5");
			attr(feTurbulence7, "seed", "10");
			attr(feTurbulence7, "result", "f2");
			attr(feDisplacementMap4, "xChannelSelector", "R");
			attr(feDisplacementMap4, "yChannelSelector", "G");
			attr(feDisplacementMap4, "scale", "5");
			attr(feDisplacementMap4, "in", "SourceGraphic");
			attr(feDisplacementMap4, "in2", "f2");
			attr(feDisplacementMap4, "result", "f5");
			attr(feTurbulence8, "type", "fractalNoise");
			attr(feTurbulence8, "baseFrequency", "0.03");
			attr(feTurbulence8, "numOctaves", "5");
			attr(feTurbulence8, "seed", "100");
			attr(feTurbulence8, "result", "f3");
			attr(feDisplacementMap5, "xChannelSelector", "R");
			attr(feDisplacementMap5, "yChannelSelector", "G");
			attr(feDisplacementMap5, "scale", "3");
			attr(feDisplacementMap5, "in", "SourceGraphic");
			attr(feDisplacementMap5, "in2", "f3");
			attr(feDisplacementMap5, "result", "f6");
			attr(feBlend0, "mode", "multiply");
			attr(feBlend0, "in2", "f4");
			attr(feBlend0, "in", "f5");
			attr(feBlend0, "result", "out1");
			attr(feBlend1, "mode", "multiply");
			attr(feBlend1, "in", "out1");
			attr(feBlend1, "in2", "f6");
			attr(feBlend1, "result", "out2");
			attr(filter5, "x", "-20%");
			attr(filter5, "y", "-20%");
			attr(filter5, "width", "140%");
			attr(filter5, "height", "140%");
			attr(filter5, "filterUnits", "objectBoundingBox");
			attr(filter5, "id", "pencilTexture4");
			attr(feTurbulence9, "type", "fractalNoise");
			attr(feTurbulence9, "baseFrequency", "2");
			attr(feTurbulence9, "numOctaves", "5");
			attr(feTurbulence9, "stitchTiles", "stitch");
			attr(feTurbulence9, "result", "t1");
			attr(feColorMatrix2, "type", "matrix");
			attr(feColorMatrix2, "values", "0 0 0 0 0, 0 0 0 0 0, 0 0 0 0 0, 0 0 0 -1.5 1.5");
			attr(feColorMatrix2, "result", "t2");
			attr(feComposite3, "operator", "in");
			attr(feComposite3, "in2", "t2");
			attr(feComposite3, "in", "SourceGraphic");
			attr(feComposite3, "result", "SourceTextured");
			attr(feTurbulence10, "type", "fractalNoise");
			attr(feTurbulence10, "baseFrequency", "0.03");
			attr(feTurbulence10, "numOctaves", "5");
			attr(feTurbulence10, "seed", "1");
			attr(feTurbulence10, "result", "f1");
			attr(feDisplacementMap6, "xChannelSelector", "R");
			attr(feDisplacementMap6, "yChannelSelector", "G");
			attr(feDisplacementMap6, "scale", "5");
			attr(feDisplacementMap6, "in", "SourceTextured");
			attr(feDisplacementMap6, "in2", "f1");
			attr(feDisplacementMap6, "result", "f4");
			attr(feTurbulence11, "type", "fractalNoise");
			attr(feTurbulence11, "baseFrequency", "0.03");
			attr(feTurbulence11, "numOctaves", "5");
			attr(feTurbulence11, "seed", "10");
			attr(feTurbulence11, "result", "f2");
			attr(feDisplacementMap7, "xChannelSelector", "R");
			attr(feDisplacementMap7, "yChannelSelector", "G");
			attr(feDisplacementMap7, "scale", "5");
			attr(feDisplacementMap7, "in", "SourceTextured");
			attr(feDisplacementMap7, "in2", "f2");
			attr(feDisplacementMap7, "result", "f5");
			attr(feTurbulence12, "type", "fractalNoise");
			attr(feTurbulence12, "baseFrequency", "0.03");
			attr(feTurbulence12, "numOctaves", "5");
			attr(feTurbulence12, "seed", "100");
			attr(feTurbulence12, "result", "f3");
			attr(feDisplacementMap8, "xChannelSelector", "R");
			attr(feDisplacementMap8, "yChannelSelector", "G");
			attr(feDisplacementMap8, "scale", "3");
			attr(feDisplacementMap8, "in", "SourceTextured");
			attr(feDisplacementMap8, "in2", "f3");
			attr(feDisplacementMap8, "result", "f6");
			attr(feBlend2, "mode", "multiply");
			attr(feBlend2, "in2", "f4");
			attr(feBlend2, "in", "f5");
			attr(feBlend2, "result", "out1");
			attr(feBlend3, "mode", "multiply");
			attr(feBlend3, "in", "out1");
			attr(feBlend3, "in2", "f6");
			attr(feBlend3, "result", "out2");
			attr(filter6, "x", "-20%");
			attr(filter6, "y", "-20%");
			attr(filter6, "width", "140%");
			attr(filter6, "height", "140%");
			attr(filter6, "filterUnits", "objectBoundingBox");
			attr(filter6, "id", "pencilTexture5");
			attr(svg, "preserveAspectRatio", "xMidYMid slice");
			attr(svg, "id", "svg");
			attr(svg, "width", "775");
			attr(svg, "height", "775");
			attr(svg, "viewBox", "-500 -500 1000 1000");
			attr(svg, "class", "svelte-1ul8ke5");
			attr(div, "class", "thumb svelte-1ul8ke5");
			attr(container, "class", "svelte-1ul8ke5");
		},
		m(target, anchor) {
			insert(target, container, anchor);
			append(container, svg);
			append(svg, rect);
			append(svg, defs);
			append(defs, filter0);
			append(filter0, feTurbulence0);
			append(filter0, feDiffuseLighting);
			append(feDiffuseLighting, feDistantLight);
			append(filter0, feGaussianBlur);
			append(filter0, feComposite0);
			append(defs, filter1);
			append(filter1, feTurbulence1);
			append(filter1, feDisplacementMap0);
			append(defs, filter2);
			append(filter2, feTurbulence2);
			append(filter2, feDisplacementMap1);
			append(defs, filter3);
			append(filter3, feTurbulence3);
			append(filter3, feColorMatrix0);
			append(filter3, feComposite1);
			append(defs, filter4);
			append(filter4, feTurbulence4);
			append(filter4, feColorMatrix1);
			append(filter4, feComposite2);
			append(filter4, feTurbulence5);
			append(filter4, feDisplacementMap2);
			append(defs, filter5);
			append(filter5, feTurbulence6);
			append(filter5, feDisplacementMap3);
			append(filter5, feTurbulence7);
			append(filter5, feDisplacementMap4);
			append(filter5, feTurbulence8);
			append(filter5, feDisplacementMap5);
			append(filter5, feBlend0);
			append(filter5, feBlend1);
			append(defs, filter6);
			append(filter6, feTurbulence9);
			append(filter6, feColorMatrix2);
			append(filter6, feComposite3);
			append(filter6, feTurbulence10);
			append(filter6, feDisplacementMap6);
			append(filter6, feTurbulence11);
			append(filter6, feDisplacementMap7);
			append(filter6, feTurbulence12);
			append(filter6, feDisplacementMap8);
			append(filter6, feBlend2);
			append(filter6, feBlend3);
			append(container, t0);
			mount_component(artboard, container, null);
			append(container, t1);
			append(container, div);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(artboard.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(artboard.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(container);
			destroy_component(artboard);
		}
	};
}

class Canvas extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export default Canvas;