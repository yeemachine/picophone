import './BottomNav.svelte.css.proxy.js';
/* src/BottomNav.svelte generated by Svelte v3.44.2 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	noop,
	run_all,
	safe_not_equal,
	set_input_value,
	set_style,
	space,
	subscribe,
	toggle_class,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import { writable } from '../_snowpack/pkg/svelte/store.js';

import AudioVisualizer, {
	recordedAudio,
	isPlaying
} from './AudioVisualizer.svelte.js';

import Speech, { recognition } from './Speech.svelte.js';

function create_fragment(ctx) {
	let container;
	let div;
	let button0;
	let t1;
	let input;
	let input_data_length_value;
	let input_size_value;
	let t2;
	let button1;
	let t4;
	let speech;
	let t5;
	let audiovisualizer;
	let t6;
	let button2;
	let current;
	let mounted;
	let dispose;

	speech = new Speech({
			props: { recording: /*recording*/ ctx[0] }
		});

	audiovisualizer = new AudioVisualizer({
			props: { recording: /*recording*/ ctx[0] }
		});

	return {
		c() {
			container = element("container");
			div = element("div");
			button0 = element("button");
			button0.innerHTML = `<span class="material-icons svelte-1bj7oi7">volume_up</span>`;
			t1 = space();
			input = element("input");
			t2 = space();
			button1 = element("button");
			button1.innerHTML = `<span class="material-icons svelte-1bj7oi7">shuffle</span>`;
			t4 = space();
			create_component(speech.$$.fragment);
			t5 = space();
			create_component(audiovisualizer.$$.fragment);
			t6 = space();
			button2 = element("button");
			attr(button0, "class", "svelte-1bj7oi7");
			toggle_class(button0, "playing", /*$isPlaying*/ ctx[1]);
			attr(input, "data-length", input_data_length_value = /*$mainText*/ ctx[2].length);
			attr(input, "maxlength", "12");
			attr(input, "spellcheck", "false");
			attr(input, "type", "text");

			set_style(input, "width", (/*$mainText*/ ctx[2].length > 0
			? /*$mainText*/ ctx[2].length * 24
			: 180) + "px");

			attr(input, "size", input_size_value = /*$mainText*/ ctx[2].length);
			attr(input, "placeholder", "Your Text");
			attr(input, "class", "svelte-1bj7oi7");
			attr(button1, "class", "svelte-1bj7oi7");
			attr(div, "class", "modifier svelte-1bj7oi7");
			attr(button2, "class", "record svelte-1bj7oi7");
			toggle_class(button2, "recording", /*recording*/ ctx[0]);
			attr(container, "class", "svelte-1bj7oi7");
		},
		m(target, anchor) {
			insert(target, container, anchor);
			append(container, div);
			append(div, button0);
			append(div, t1);
			append(div, input);
			set_input_value(input, /*$mainText*/ ctx[2]);
			append(div, t2);
			append(div, button1);
			append(container, t4);
			mount_component(speech, container, null);
			append(container, t5);
			mount_component(audiovisualizer, container, null);
			append(container, t6);
			append(container, button2);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler*/ ctx[3]),
					listen(input, "input", /*input_input_handler*/ ctx[4]),
					listen(button2, "pointerdown", /*pointerdown_handler*/ ctx[5]),
					listen(button2, "pointerup", /*pointerup_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*$isPlaying*/ 2) {
				toggle_class(button0, "playing", /*$isPlaying*/ ctx[1]);
			}

			if (!current || dirty & /*$mainText*/ 4 && input_data_length_value !== (input_data_length_value = /*$mainText*/ ctx[2].length)) {
				attr(input, "data-length", input_data_length_value);
			}

			if (!current || dirty & /*$mainText*/ 4) {
				set_style(input, "width", (/*$mainText*/ ctx[2].length > 0
				? /*$mainText*/ ctx[2].length * 24
				: 180) + "px");
			}

			if (!current || dirty & /*$mainText*/ 4 && input_size_value !== (input_size_value = /*$mainText*/ ctx[2].length)) {
				attr(input, "size", input_size_value);
			}

			if (dirty & /*$mainText*/ 4 && input.value !== /*$mainText*/ ctx[2]) {
				set_input_value(input, /*$mainText*/ ctx[2]);
			}

			const speech_changes = {};
			if (dirty & /*recording*/ 1) speech_changes.recording = /*recording*/ ctx[0];
			speech.$set(speech_changes);
			const audiovisualizer_changes = {};
			if (dirty & /*recording*/ 1) audiovisualizer_changes.recording = /*recording*/ ctx[0];
			audiovisualizer.$set(audiovisualizer_changes);

			if (dirty & /*recording*/ 1) {
				toggle_class(button2, "recording", /*recording*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(speech.$$.fragment, local);
			transition_in(audiovisualizer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(speech.$$.fragment, local);
			transition_out(audiovisualizer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(container);
			destroy_component(speech);
			destroy_component(audiovisualizer);
			mounted = false;
			run_all(dispose);
		}
	};
}

const mainText = writable('SHEEEESH');
const fonts = writable('bold');

function instance($$self, $$props, $$invalidate) {
	let $isPlaying;

	let $mainText,
		$$unsubscribe_mainText = noop,
		$$subscribe_mainText = () => ($$unsubscribe_mainText(), $$unsubscribe_mainText = subscribe(mainText, $$value => $$invalidate(2, $mainText = $$value)), mainText);

	component_subscribe($$self, isPlaying, $$value => $$invalidate(1, $isPlaying = $$value));
	component_subscribe($$self, mainText, $$value => $$invalidate(2, $mainText = $$value));
	$$self.$$.on_destroy.push(() => $$unsubscribe_mainText());
	let recording = false;

	const text2Array = () => {
		
	};

	const click_handler = () => {
		isPlaying.set(true);
		recordedAudio.play();
	};

	function input_input_handler() {
		$mainText = this.value;
		mainText.set($mainText);
	}

	const pointerdown_handler = e => {
		$$invalidate(0, recording = true);
	};

	const pointerup_handler = () => {
		$$invalidate(0, recording = false);
	};

	return [
		recording,
		$isPlaying,
		$mainText,
		click_handler,
		input_input_handler,
		pointerdown_handler,
		pointerup_handler
	];
}

class BottomNav extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default BottomNav;
export { mainText, fonts };